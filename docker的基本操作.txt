#1.列出当前系统中所有的docker镜像
docker image ls 
#旧版本：docker images
#该命令会列出仓库、镜像名(tag)、镜像ID、创建时间、镜像大小
#docker的镜像是多层存储结构的，由于docker使用的是Union FS文件系统，相同的层文件只需要存储一份；
#因此镜像的总大小可能比列出来的总和要小的多;可以用使用以下命令查看镜像、容器、数据卷所占用的空间：
docker system df

#2.虚悬镜像
#如果我们使用docker build 构建同名镜像或者使用docker pull拉取同名镜像，本地的同名镜像的仓库和镜像名就会变成<none>；
#此时的镜像称为虚悬镜像，此类镜像已经没有存在的必要，可以删除：
#专门显示此类镜像的命令:
docker image ls -f dangling=true

#删除此类镜像的命令：
docker image purne

#3.中间层镜像
#由于docker是多层结构，在使用一段时间后，系统中会出现很多中间层依赖镜像，默认的docker image ls只显示顶层镜像；如果希望
#查看所有镜像，可以使用以下命令:（可能会看到很多无标签的镜像，此类镜像为其他镜像的依赖镜像，不能删除）
docker image ls -a
docker image ls -a -q (只显示镜像Id)


#4.更多查看指令
#4.1查看指定仓库镜像
docker image ls ubuntu

#4.2 查看指定镜像
docker image ls ubuntu:14.04

#4.3查看自从某个时间之后的镜像
docker image ls -f since=ubuntu:14.04

#4.4按指定格式显示镜像（格式按照go的模板参数格式）
docker image ls --format "{{.ID}}: {{.Repository}}"


#5.删除镜像(只能删除没有容器的镜像；如果使用该镜像运行了容器，则需先删除依赖的容器再删除该镜像)
docker image rm [镜像id] [镜像名]
#对应老版本的docker rmi
#由于镜像是分层存储的，删除过程会一层一层删除；并且docker多个标签可以对应一个镜像，当删除一个标签时，还有其他标签指向
#该镜像时，docker image rm 只会执行untagged指令，不会执行deleted指令，只有当没有标签对应该镜像时；才会真正删除该镜像

#删除所有镜像
docker image rm $(docker image ls -q)





linux网络桥接

查看网络名字空间
ip netns list

查看当前的网桥、网卡列表
ip link list

创建网络名字空间
ip netns add netns_test

添加一对虚拟网卡
ip link add veth_1 type veth peer name eth_1

将其中一块虚拟网卡添加进网络名字空间netns_test
ip link set eth_1 netns netns_test

给网络名字空间的网卡配置ip
ip netns exec netns_test ip addr add 10.0.0.2/24 dev eth_1

启动网络名字空间里面的虚拟网卡
ip netns exec netns_test ip link set dev eth_1 up

给主机的虚拟网卡配置Ip
ip addr add 10.0.0.1/24 dev veth_1

启动主机的虚拟网卡
ip link set dev veth_1 up

网络名字空间的虚拟网卡ping主机的网卡
ip netns exec netns_test ping 10.0.0.1

主机虚拟网卡ping网络名字空间的虚拟网卡
ping 10.0.0.2

删除网络名字空间
ip netns delete netns_test

删除网络名字空间虚拟网卡
ip netns exec netns_test ip link delete eth_1

删除虚拟网卡
ip link delete veth_1

删除网桥
brctl delbr br_name

从网桥上的移除网卡
brctl delif br_name eth_name1 eth_name2


默认情况下，docker中所有容器的虚拟网卡都是成对存在的，一个存在主机(veth[xxxxx])，挂载在docker0这个网桥上，
另一个挂载在容器的网络名字空间里面(eth0)；所以，主机上的所有容器都可以通过内网IP进行通信。

练习：配置docker容器的网络
1.首先，启动两没有网络配置的容器
docker run --rm -it --net=none --name docker1 ubuntu:14.04 bash
docker run --rm -it --net=none --name docker2 ubuntu:14.04 bash

2.查询两docker容器的进程id，并对各自的网络名字空间设置软链接
docker inspect --format '{{ .State.Pid}}' docker1
6225 
docker inspect --format '{{ .State.Pid}}' docker2
6385

sudo ln -s /proc/6225/ns/net /var/run/netns/netns_docker_1
sudo ln -s /proc/6385/ns/net /var/run/netns/netns_docker_1

3.添加两对(4块)虚拟网卡
sudo ip link add veth1 type veth peer name eth1
sudo ip link add veth2 type veth peer name eth2

4.将两块网卡分别设置进相应容器的网络名字空间
sudo ip link set eth1 netns netns_docker_1
sudo ip link set eth2 netns netns_docker_2

5.分别给网络名字空间里面的网卡设置ip，并启动网卡
sudo ip netns exec netns_docker_1 ip addr add 10.0.0.2/24 dev eth1
sudo ip netns exec netns_docker_2 ip addr add 10.0.0.3/24 dev eth2
sudo ip netns exec netns_docker_1 ip link set dev eth1 up
sudo ip netns exec netns_docker_2 ip link set dev eth2 up

6.添加虚拟网桥，并将刚才创建的虚拟网卡中的剩余两块配置在网桥上，并启动
sudo brctl addbr br0
brctl addif br0 veth1 veth2
sudo ifconfig br0 up
sudo ifconfig veth1 up
sudo ifconfig veth2 up

7.在两容器中通信